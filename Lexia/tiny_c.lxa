[ \t\n]* : LEXIA_IGNORE
int : INT
if : IF
else : ELSE
return : RETURN	
while : WHILE
; : SEMICOLON
, : COMMA
\+ : PLUS
- : MINUS
\* : ASTERISK
/ : SLASH
% : PERCENT
= : EQUAL
== : EQUALEQUAL
!= : NOT_EQUAL
&& : AND
\|\| : OR
< : LOWER_THAN
> : HIGHER_THAN
<= : LOWER_EQUAL
>= : HIGHER_EQUAL
\( : LEFT_PARENTHESIS
\) : RIGHT_PARENTHESIS
\{ : LEFT_BRACE
\} : RIGHT_BRACE
[0-9]+ : CONSTANT
[a-z_][a-z0-9_]* : IDENTIFIER
LEXIA_SYNTAX_TOKEN : IF_WITH_ELSE
LEXIA_SYNTAX_TOKEN : IF_OF_IF_WITH_ELSE
LEXIA_SYNTAX_TOKEN : CONS
LEXIA_SYNTAX_TOKEN : BLOCK
LEXIA_SYNTAX_TOKEN : VARIABLE_DECLARATION
LEXIA_SYNTAX_TOKEN : FUNCTION_DECLARATION
LEXIA_SYNTAX_TOKEN : PARAMETER_DECLARATION
LEXIA_SYNTAX_TOKEN : VARIABLE_REFERENCE
LEXIA_SYNTAX_TOKEN : FUNCTION_CALL
LEXIA_SYNTAX_TOKEN : PARAMETER_LIST
LEXIA_SYNTAX_TOKEN : PARAMETER
LEXIA_SYNTAX_TOKEN : ASSIGN
LEXIA_SYNTAX_TOKEN : LOGICAL_OR
LEXIA_SYNTAX_TOKEN : LOGICAL_AND
LEXIA_SYNTAX_TOKEN : EQUALITY
LEXIA_SYNTAX_TOKEN : NOT_EQUALITY
LEXIA_SYNTAX_TOKEN : RELATIONAL_HIGHER_THAN
LEXIA_SYNTAX_TOKEN : RELATIONAL_LOWER_THAN
LEXIA_SYNTAX_TOKEN : RELATIONAL_HIGHER_EQUAL
LEXIA_SYNTAX_TOKEN : RELATIONAL_LOWER_EQUAL
LEXIA_SYNTAX_TOKEN : ADD
LEXIA_SYNTAX_TOKEN : SUB
LEXIA_SYNTAX_TOKEN : MUL
LEXIA_SYNTAX_TOKEN : DIV
LEXIA_SYNTAX_TOKEN : REM
LEXIA_SYNTAX_TOKEN : UNARY_MINUS
